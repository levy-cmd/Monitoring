input {

  file {

    path => 'C:/laragon/www/NoneProject-V1/Back-end/logs/access.log'

    type => "apache"

    # start_position => "beginning"

    # codec =>  multiline {
    #     pattern => "%{IP:[apache2][access][remote_ip]} %{USER:ident} %{USER:auth} \[%{HTTPDATE:timestamp}\]"
    #     negate => true
    #     what => previous
    #     auto_flush_interval => 10
    # }

  }

}

# filter {

#   grok {

#     match => { "message" => "%{COMBINEDAPACHELOG}" }

#   }

# }

filter {

  grok {

    match => { "message" => "%{IPORHOST:CFA_CLIENT_IP} %{HTTPDUSER:CFA_IDENT} %{USER:CFA_AUTH} \[%{HTTPDATE:CFA_TIMESTAMP}\] "(?:%{WORD:CFA_METHOD} %{NOTSPACE:CFA_REQUEST}(?: HTTP/%{NUMBER:CFA_HTTPVERSION})?|%{DATA:CFA_RAWREQUEST})" (?:%{NUMBER:CFA_RESPONSE}|-) (?:%{NUMBER:CFA_BYTES}|-)" }

  }

}

# filter {
#     # Analyze access log
#     if [fields][type] == "apache-access" {
#         # First part: get every common message
#         grok {
#             match => { "message" => "^%{IP:[apache2][access][remote_ip]} %{USER:ident} %{USER:auth} \[%{HTTPDATE:timestamp}\] " }
#             overwrite => "message"
#         }

#         # Get the specifics
#         grok {
#             match => { "message" => "\"(?:%{WORD:[apache2][access][method]} %{NOTSPACE:[apache2][access][url]}(?: HTTP/%{BASE16FLOAT:[apache2][access][http_version]})?|%{DATA:rawrequest})\" %{INT:[apache2][access][response_code]} (?:%{INT:[apache2][access][body_sent][bytes]}|-) %{QS:[apache2][access][referrer]} %{QS:[apache2][access][agent]}" }
#             remove_field => [ "message" ]
#         }

#         # Add the user-agent data
#         useragent {
#             source => "[apache2][access][agent]"
#             target => "[apache2][access][user_agent]"
#         }

#         # Get the quotes out of the data we are going to save
#         mutate {
#             gsub => [
#                 "[apache2][access][referrer]", '"', "",
#                 "[apache2][access][agent]", '"', ""
#             ]
#         }
#     }

#     # Analyze error log
#     if [fields][type] == "apache-error" {
#         # First part and always equal: get the header of the log
#         grok {
#             match => { "message" => "^\[%{DAY:weekday} %{MONTH:month} %{MONTHDAY:day} %{TIME:time}(?:.%{INT:microseconds})? %{YEAR:year}\] \[(?:php7\:)?%{WORD:[apache2][error][level]}\] (?:\[pid %{INT:[apache2][error][pid]}\] )?\[client %{IP:[apache2][access][remote_ip]}(?:\:%{INT:internalPort})?\] PHP %{DATA:[php][errorLevel]}\: %{GREEDYDATA:message}" }
#             overwrite => "message"
#         }

#         # This can have a lot of variations, so perform this in a second run
#         grok {
#             match => { "message" => "%{DATA:[php][errorMessage]} in %{DATA:[php][file]}(?:\:%{INT}\\nStack trace:\\n%{DATA:[php][stackTrace]} in %{DATA})? on line %{INT:[php][line]}(?:, referer\: %{DATA:[php][referer]})?" }
#             remove_field => [ "weekday", "month", "day", "time", "microseconds", "year", "internalport", "message" ]
#         }

#         # Transform certain parts: get whitespaces out and convert stacktrace to an actual array
#         mutate {
#             strip => [ "[php][errorLevel]", "[php][errorMessage]", "[php][file]" ]
#             split => { "[php][stackTrace]" => "\n" }
#         }
#     }

#     # Lastly, set the geoip data
#     geoip {
#         source => "[apache2][access][remote_ip]"
#         target => "[apache2][access][geoip]"
#     }
# }

output {

  elasticsearch {
      hosts => ["localhost:9200"]
      index => "apachelog"
   }

}